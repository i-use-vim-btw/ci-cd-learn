name: Integration Test

on:
  workflow_dispatch:  # Manually trigger the workflow

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22.4'

      # Step 3: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Install Helm
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      # Step 5: Install Kind (for local Kubernetes cluster)
      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.19.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      # Step 6: Create a Kind Cluster
      - name: Create Kind cluster
        run: kind create cluster --name my-kind-cluster

      # Step 7: Build API Docker Image
      - name: Build API Docker Image
        run: docker build -t my-api-image -f Dockerfile.api .

      # Step 8: Build Test Docker Image
      - name: Build Test Docker Image
        run: docker build -t my-test-image -f Dockerfile.test .

      # Step 9: Load API Docker Image into Kind
      - name: Load API Docker Image into Kind
        run: kind load docker-image my-api-image --name my-kind-cluster
      
      # Step 10: Load Test Docker Image into Kind
      - name: Load Test Docker Image into Kind
        run: kind load docker-image my-test-image --name my-kind-cluster

      # Step 11: Deploy API Using Helm
      - name: Deploy API
        run: helm install my-api ./my-api-chart

      # Step 12: Wait until the API pod is ready
      - name: Wait for API Pod to be Ready
        run: |
          kubectl wait --for=condition=ready pod -l app=my-api --timeout=20s

      # Step 13: Deploy the test pod
      - name: Deploy Test Pod
        run: kubectl apply -f test-pod.yaml

      # Step 14: Wait for Test Pod to Complete (Succeeded or Failed)
      - name: Wait for Test Pod to Succeed
        run: |
          while [[ $(kubectl get pod api-test -o jsonpath='{.status.phase}') != "Succeeded" && \
                   $(kubectl get pod api-test -o jsonpath='{.status.phase}') != "Failed" ]]; do
            echo "Waiting for test pod to complete..."
            sleep 5
          done

      # Step 15: Retrieve test pod logs (for test results)
      - name: Get Test Pod Logs
        run: |
          kubectl logs api-test

